// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// generator erd {
//   provider = "prisma-erd-generator"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @default(uuid())
  google_id            String?
  name                 String
  birthDate            DateTime?             @db.Timestamp()
  location             String?
  url                  String?
  description          String?
  protected            Boolean               @default(false)
  verified             Boolean               @default(false)
  followersCount       Int                   @default(0)
  followingCount       Int                   @default(0)
  createdAt            DateTime              @db.Timestamp()
  deletedAt            DateTime?             @db.Timestamp()
  profileBannerUrl     String?
  profileImageUrl      String?
  email                String                @unique
  userName             String                @unique
  password             String
  passwordChangedAt    DateTime?             @db.Timestamp()
  passwordResetToken   String?               @unique
  passwordResetExpires DateTime?
  blocker              Block[]               @relation("blocker")
  blocked              Block[]               @relation("blocked")
  follower             Follow[]              @relation("follower")
  followed             Follow[]              @relation("followed")
  muter                Mute[]                @relation("muter")
  muted                Mute[]                @relation("muted")
  Tweet                Tweet[]
  Like                 Like[]
  Mention              Mention[]
  Message              Message[]
  Notification         Notification[]        @relation("sendNotification")
  RecieveNotification  RecieveNotification[]
  UserConversations    UserConversations[]

  @@id([id])
}

model EmailVerification {
  email    String  @id
  code     String
  verified Boolean @default(false)
}

model Block {
  blocker   User   @relation("blocker", fields: [blockerId], references: [id])
  blockerId String
  blocked   User   @relation("blocked", fields: [blockedId], references: [id])
  blockedId String

  @@id([blockerId, blockedId])
}

model Follow {
  follower    User   @relation("follower", fields: [folowererId], references: [id])
  folowererId String
  followed    User   @relation("followed", fields: [followedId], references: [id])
  followedId  String

  @@id([folowererId, followedId])
}

model Mute {
  muter   User   @relation("muter", fields: [muterId], references: [id])
  muterId String
  muted   User   @relation("muted", fields: [mutedId], references: [id])
  mutedId String

  @@id([muterId, mutedId])
}

model Tweet {
  createdAt   DateTime @db.Timestamp()
  id          String   @default(uuid())
  text        String?
  source      String?
  coordinates String?
  author      User     @relation(fields: [userId], references: [id])
  userId      String
  readCount   Int     @default(0)

  replyToTweet   Tweet?  @relation("replyTo", fields: [replyToTweetId], references: [id])
  replies        Tweet[] @relation("replyTo")
  replyToTweetId String?
  replyCount     Int     @default(0)

  reTweet      Tweet?  @relation("retweetTo", fields: [retweetedId], references: [id])
  retweeted    Tweet[] @relation("retweetTo")
  retweetedId  String?
  retweetCount Int     @default(0)

  qouteTweet     Tweet?  @relation("qouteTweetTo", fields: [qouteTweetedId], references: [id])
  qouteTweeted   Tweet[] @relation("qouteTweetTo")
  qouteTweetedId String?
  qouteCount     Int     @default(0)

  likesCount Int @default(0)

  sensitive   Boolean       @default(false)
  deletedAt   DateTime?     @db.Timestamp()
  likes       Like[]
  TweetEntity TweetEntity[] @relation("HasEntity")

  @@id([id])
}

model Like {
  liker   User   @relation(fields: [userId], references: [id])
  userId  String
  liked   Tweet  @relation(fields: [tweetId], references: [id])
  tweetId String

  @@id([userId, tweetId])
}

model Mention {
  id            String @default(uuid())
  mentionedUser User   @relation(fields: [userId], references: [id])
  userId        String @unique
  entity        Entity @relation(fields: [entityId], references: [id])
  entityId      String @unique

  @@id([id])
}

model Hashtag {
  text     String
  count    Int
  entity   Entity @relation(fields: [entityId], references: [id])
  entityId String @unique

  @@id([text])
}

model Media {
  id       String @default(uuid())
  url      String @unique
  type     String @default("none")
  entity   Entity @relation(fields: [entityId], references: [id])
  entityId String @unique

  @@id([id])
}

model Url {
  id       String @default(uuid())
  text     String
  entity   Entity @relation(fields: [entityId], references: [id])
  entityId String @unique

  @@id([id])
}

model TweetEntity {
  tweet    Tweet  @relation("HasEntity", fields: [tweetId], references: [id])
  tweetId  String
  entity   Entity @relation("entityToTweet", fields: [entityId], references: [id])
  entityId String

  @@id([tweetId, entityId])
}

model messageEntity {
  message   Message @relation("hasEntity", fields: [messageId], references: [id])
  messageId String
  entity    Entity  @relation("entityToMessage", fields: [entityId], references: [id])
  entityId  String

  @@id([messageId, entityId])
}

model Entity {
  id            String          @default(uuid())
  type          String          @default("none")
  Mention       Mention?
  Hashtag       Hashtag?
  Media         Media?
  Url           Url?
  messageEntity messageEntity[] @relation("entityToMessage")
  TweetEntity   TweetEntity[]   @relation("entityToTweet")

  @@id([id])
}

model Conversation {
  id                String              @default(uuid())
  name              String?
  isGroup           Boolean             @default(false)
  photo             String?
  Message           Message[]
  UserConversations UserConversations[]

  @@id([id])
}

model Message {
  id               String          @default(uuid())
  text             String
  date             DateTime        @db.Timestamp()
  sender           User            @relation(fields: [userId], references: [id])
  userId           String
  Conversation     Conversation    @relation(fields: [conversationId], references: [id])
  conversationId   String
  isMessage        Boolean         @default(true)
  reply            Message?        @relation("reply", fields: [replyToMessageId], references: [id])
  Message          Message[]       @relation("reply")
  replyToMessageId String?
  messageEntity    messageEntity[] @relation("hasEntity")

  @@id([id])
}

model Notification {
  id                  String                @default(uuid())
  objectId            String?
  deleted             Boolean               @default(false)
  seen                Boolean               @default(false)
  createdAt           DateTime              @db.Timestamp()
  sender              User                  @relation("sendNotification", fields: [senderId], references: [id])
  senderId            String
  type                String
  RecieveNotification RecieveNotification[]

  @@id([id])
}

model RecieveNotification {
  Notification   Notification @relation(fields: [notificationId], references: [id])
  notificationId String
  reciever       User         @relation(fields: [recieverId], references: [id])
  recieverId     String

  @@id([notificationId, recieverId])
}

model UserConversations {
  User           User         @relation(fields: [userId], references: [id])
  userId         String
  Conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  seen           Boolean
  dateJoined     DateTime     @default(now())

  @@id([userId, conversationId])
}
